Nonterminals useless in grammar

   func_decl
   func_decl1
   func_parameters
   if_st
   main
   main_decl
   main_decl_part
   main_internals
   multiple_ident


Terminals unused in grammar

   KW_TRUE
   KW_FALSE
   KW_ELSE
   KW_IF
   KW_THEN
   KW_FI
   KW_WHILE
   KW_LOOP
   KW_POOL
   KW_RETURN
   KW_NOT
   KW_AND
   KW_OR
   KW_START
   NOT_EQUAL_OP
   LESS_OP
   LESS_EQUAL_OP
   FUNC_START_ARROW
   STRING


Grammar

    0 $accept: input $end

    1 input: decl_list

    2 decl_list: decl
    3          | decl_list decl

    4 decl: KW_LET decl_body_part
    5     | KW_CONST decl_body_part

    6 decl_body_part: decl_form ':' data_type ';'

    7 decl_form: decl_assign
    8          | decl_form ',' decl_assign

    9 decl_assign: ident_form_part
   10            | ident_form_part ASSIGN expr

   11 ident_form_part: IDENTIFIER
   12                | IDENTIFIER '[' ']'

   13 data_type: KW_INT
   14          | KW_BOOL
   15          | KW_REAL
   16          | KW_STRING

   17 expr: POSINT
   18     | REAL
   19     | '(' expr ')'
   20     | expr '+' expr
   21     | expr '-' expr
   22     | expr '*' expr
   23     | expr '/' expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 19
')' (41) 19
'*' (42) 22
'+' (43) 20
',' (44) 8
'-' (45) 21
'/' (47) 23
':' (58) 6
';' (59) 6
'[' (91) 12
']' (93) 12
error (256)
KW_TRUE (258)
KW_FALSE (259)
KW_INT (260) 13
KW_REAL (261) 15
KW_BOOL (262) 14
KW_STRING (263) 16
KW_ELSE (264)
KW_IF (265)
KW_THEN (266)
KW_FI (267)
KW_WHILE (268)
KW_LOOP (269)
KW_POOL (270)
KW_CONST (271) 5
KW_LET (272) 4
KW_RETURN (273)
KW_NOT (274)
KW_AND (275)
KW_OR (276)
KW_START (277)
NOT_EQUAL_OP (278)
LESS_OP (279)
LESS_EQUAL_OP (280)
FUNC_START_ARROW (281)
IDENTIFIER (282) 11 12
POSINT (283) 17
STRING (284)
REAL (285) 18
ASSIGN (286) 10


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
input (44)
    on left: 1, on right: 0
decl_list (45)
    on left: 2 3, on right: 1 3
decl (46)
    on left: 4 5, on right: 2 3
decl_body_part (47)
    on left: 6, on right: 4 5
decl_form (48)
    on left: 7 8, on right: 6 8
decl_assign (49)
    on left: 9 10, on right: 7 8
ident_form_part (50)
    on left: 11 12, on right: 9 10
data_type (51)
    on left: 13 14 15 16, on right: 6
expr (52)
    on left: 17 18 19 20 21 22 23, on right: 10 19 20 21 22 23


State 0

    0 $accept: . input $end
    1 input: . decl_list
    2 decl_list: . decl
    3          | . decl_list decl
    4 decl: . KW_LET decl_body_part
    5     | . KW_CONST decl_body_part

    KW_CONST  shift, and go to state 1
    KW_LET    shift, and go to state 2

    input      go to state 3
    decl_list  go to state 4
    decl       go to state 5


State 1

    5 decl: KW_CONST . decl_body_part
    6 decl_body_part: . decl_form ':' data_type ';'
    7 decl_form: . decl_assign
    8          | . decl_form ',' decl_assign
    9 decl_assign: . ident_form_part
   10            | . ident_form_part ASSIGN expr
   11 ident_form_part: . IDENTIFIER
   12                | . IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 6

    decl_body_part   go to state 7
    decl_form        go to state 8
    decl_assign      go to state 9
    ident_form_part  go to state 10


State 2

    4 decl: KW_LET . decl_body_part
    6 decl_body_part: . decl_form ':' data_type ';'
    7 decl_form: . decl_assign
    8          | . decl_form ',' decl_assign
    9 decl_assign: . ident_form_part
   10            | . ident_form_part ASSIGN expr
   11 ident_form_part: . IDENTIFIER
   12                | . IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 6

    decl_body_part   go to state 11
    decl_form        go to state 8
    decl_assign      go to state 9
    ident_form_part  go to state 10


State 3

    0 $accept: input . $end

    $end  shift, and go to state 12


State 4

    1 input: decl_list .  [$end]
    3 decl_list: decl_list . decl
    4 decl: . KW_LET decl_body_part
    5     | . KW_CONST decl_body_part

    KW_CONST  shift, and go to state 1
    KW_LET    shift, and go to state 2

    $default  reduce using rule 1 (input)

    decl  go to state 13


State 5

    2 decl_list: decl .

    $default  reduce using rule 2 (decl_list)


State 6

   11 ident_form_part: IDENTIFIER .  [ASSIGN, ':', ',']
   12                | IDENTIFIER . '[' ']'

    '['  shift, and go to state 14

    $default  reduce using rule 11 (ident_form_part)


State 7

    5 decl: KW_CONST decl_body_part .

    $default  reduce using rule 5 (decl)


State 8

    6 decl_body_part: decl_form . ':' data_type ';'
    8 decl_form: decl_form . ',' decl_assign

    ':'  shift, and go to state 15
    ','  shift, and go to state 16


State 9

    7 decl_form: decl_assign .

    $default  reduce using rule 7 (decl_form)


State 10

    9 decl_assign: ident_form_part .  [':', ',']
   10            | ident_form_part . ASSIGN expr

    ASSIGN  shift, and go to state 17

    $default  reduce using rule 9 (decl_assign)


State 11

    4 decl: KW_LET decl_body_part .

    $default  reduce using rule 4 (decl)


State 12

    0 $accept: input $end .

    $default  accept


State 13

    3 decl_list: decl_list decl .

    $default  reduce using rule 3 (decl_list)


State 14

   12 ident_form_part: IDENTIFIER '[' . ']'

    ']'  shift, and go to state 18


State 15

    6 decl_body_part: decl_form ':' . data_type ';'
   13 data_type: . KW_INT
   14          | . KW_BOOL
   15          | . KW_REAL
   16          | . KW_STRING

    KW_INT     shift, and go to state 19
    KW_REAL    shift, and go to state 20
    KW_BOOL    shift, and go to state 21
    KW_STRING  shift, and go to state 22

    data_type  go to state 23


State 16

    8 decl_form: decl_form ',' . decl_assign
    9 decl_assign: . ident_form_part
   10            | . ident_form_part ASSIGN expr
   11 ident_form_part: . IDENTIFIER
   12                | . IDENTIFIER '[' ']'

    IDENTIFIER  shift, and go to state 6

    decl_assign      go to state 24
    ident_form_part  go to state 10


State 17

   10 decl_assign: ident_form_part ASSIGN . expr
   17 expr: . POSINT
   18     | . REAL
   19     | . '(' expr ')'
   20     | . expr '+' expr
   21     | . expr '-' expr
   22     | . expr '*' expr
   23     | . expr '/' expr

    POSINT  shift, and go to state 25
    REAL    shift, and go to state 26
    '('     shift, and go to state 27

    expr  go to state 28


State 18

   12 ident_form_part: IDENTIFIER '[' ']' .

    $default  reduce using rule 12 (ident_form_part)


State 19

   13 data_type: KW_INT .

    $default  reduce using rule 13 (data_type)


State 20

   15 data_type: KW_REAL .

    $default  reduce using rule 15 (data_type)


State 21

   14 data_type: KW_BOOL .

    $default  reduce using rule 14 (data_type)


State 22

   16 data_type: KW_STRING .

    $default  reduce using rule 16 (data_type)


State 23

    6 decl_body_part: decl_form ':' data_type . ';'

    ';'  shift, and go to state 29


State 24

    8 decl_form: decl_form ',' decl_assign .

    $default  reduce using rule 8 (decl_form)


State 25

   17 expr: POSINT .

    $default  reduce using rule 17 (expr)


State 26

   18 expr: REAL .

    $default  reduce using rule 18 (expr)


State 27

   17 expr: . POSINT
   18     | . REAL
   19     | . '(' expr ')'
   19     | '(' . expr ')'
   20     | . expr '+' expr
   21     | . expr '-' expr
   22     | . expr '*' expr
   23     | . expr '/' expr

    POSINT  shift, and go to state 25
    REAL    shift, and go to state 26
    '('     shift, and go to state 27

    expr  go to state 30


State 28

   10 decl_assign: ident_form_part ASSIGN expr .  [':', ',']
   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr

    '-'  shift, and go to state 31
    '+'  shift, and go to state 32
    '*'  shift, and go to state 33
    '/'  shift, and go to state 34

    $default  reduce using rule 10 (decl_assign)


State 29

    6 decl_body_part: decl_form ':' data_type ';' .

    $default  reduce using rule 6 (decl_body_part)


State 30

   19 expr: '(' expr . ')'
   20     | expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr

    '-'  shift, and go to state 31
    '+'  shift, and go to state 32
    '*'  shift, and go to state 33
    '/'  shift, and go to state 34
    ')'  shift, and go to state 35


State 31

   17 expr: . POSINT
   18     | . REAL
   19     | . '(' expr ')'
   20     | . expr '+' expr
   21     | . expr '-' expr
   21     | expr '-' . expr
   22     | . expr '*' expr
   23     | . expr '/' expr

    POSINT  shift, and go to state 25
    REAL    shift, and go to state 26
    '('     shift, and go to state 27

    expr  go to state 36


State 32

   17 expr: . POSINT
   18     | . REAL
   19     | . '(' expr ')'
   20     | . expr '+' expr
   20     | expr '+' . expr
   21     | . expr '-' expr
   22     | . expr '*' expr
   23     | . expr '/' expr

    POSINT  shift, and go to state 25
    REAL    shift, and go to state 26
    '('     shift, and go to state 27

    expr  go to state 37


State 33

   17 expr: . POSINT
   18     | . REAL
   19     | . '(' expr ')'
   20     | . expr '+' expr
   21     | . expr '-' expr
   22     | . expr '*' expr
   22     | expr '*' . expr
   23     | . expr '/' expr

    POSINT  shift, and go to state 25
    REAL    shift, and go to state 26
    '('     shift, and go to state 27

    expr  go to state 38


State 34

   17 expr: . POSINT
   18     | . REAL
   19     | . '(' expr ')'
   20     | . expr '+' expr
   21     | . expr '-' expr
   22     | . expr '*' expr
   23     | . expr '/' expr
   23     | expr '/' . expr

    POSINT  shift, and go to state 25
    REAL    shift, and go to state 26
    '('     shift, and go to state 27

    expr  go to state 39


State 35

   19 expr: '(' expr ')' .

    $default  reduce using rule 19 (expr)


State 36

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   21     | expr '-' expr .  ['-', '+', ':', ',', ')']
   22     | expr . '*' expr
   23     | expr . '/' expr

    '*'  shift, and go to state 33
    '/'  shift, and go to state 34

    $default  reduce using rule 21 (expr)

    Conflict between rule 21 and token '-' resolved as reduce (%left '-').
    Conflict between rule 21 and token '+' resolved as reduce (%left '+').
    Conflict between rule 21 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 21 and token '/' resolved as shift ('-' < '/').


State 37

   20 expr: expr . '+' expr
   20     | expr '+' expr .  ['-', '+', ':', ',', ')']
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr

    '*'  shift, and go to state 33
    '/'  shift, and go to state 34

    $default  reduce using rule 20 (expr)

    Conflict between rule 20 and token '-' resolved as reduce (%left '-').
    Conflict between rule 20 and token '+' resolved as reduce (%left '+').
    Conflict between rule 20 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 20 and token '/' resolved as shift ('+' < '/').


State 38

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   22     | expr '*' expr .  ['-', '+', '*', '/', ':', ',', ')']
   23     | expr . '/' expr

    $default  reduce using rule 22 (expr)

    Conflict between rule 22 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 22 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 22 and token '*' resolved as reduce (%left '*').
    Conflict between rule 22 and token '/' resolved as reduce (%left '/').


State 39

   20 expr: expr . '+' expr
   21     | expr . '-' expr
   22     | expr . '*' expr
   23     | expr . '/' expr
   23     | expr '/' expr .  ['-', '+', '*', '/', ':', ',', ')']

    $default  reduce using rule 23 (expr)

    Conflict between rule 23 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 23 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 23 and token '*' resolved as reduce (%left '*').
    Conflict between rule 23 and token '/' resolved as reduce (%left '/').
